     PROG -> MAIN {CLASSE}
     MAIN -> class id '{' public static void main '(' String '[' ']' id ')' '{' CMD '}' '}'
   CLASSE -> class id [extends id] '{' {VAR} {METODO} '}'
      VAR -> TIPO id ;
   METODO -> public TIPO id '(' [PARAMS] ')' '{' {VAR} {CMD} return EXP ; '}'
   PARAMS -> TIPO id {, TIPO id}
     TIPO -> int TIPO'
           | boolean
           | id
      CMD -> id CMD''
           | if '(' EXP ')' CMD CMD'
           | '{' {CMD} '}'
           | while '(' EXP ')' CMD
           | System.out.println '(' EXP ')' ;
      EXP -> REXP EXP'
     REXP -> AEXP REXP'
     AEXP -> MEXP AEXP'
     MEXP -> SEXP MEXP'
     SEXP -> PEXP SEXP'
           | ! SEXP
           | - SEXP
           | true
           | false
           | num
           | null
           | new int '[' EXP ']'
     PEXP -> id PEXP'
           | this PEXP'
           | new id '(' ')' PEXP'
           | '(' EXP ')' PEXP'
     EXPS -> new EXPS'''''
           | this PEXP' EXPS''''
           | id PEXP' EXPS'''
           | '(' EXP ')' PEXP' EXPS''
           | ! SEXP MEXP' AEXP' REXP' EXP' {, EXP}
           | - SEXP MEXP' AEXP' REXP' EXP' {, EXP}
           | true MEXP' AEXP' REXP' EXP' {, EXP}
           | false MEXP' AEXP' REXP' EXP' {, EXP}
           | num MEXP' AEXP' REXP' EXP' {, EXP}
           | null MEXP' AEXP' REXP' EXP' {, EXP}
     EXP' -> && REXP EXP'
           | ϵ
    REXP' -> < AEXP REXP'
           | == AEXP REXP'
           | != AEXP REXP'
           | ϵ
    AEXP' -> + MEXP AEXP'
           | - MEXP AEXP'
           | ϵ
    MEXP' -> * SEXP MEXP'
           | ϵ
    PEXP' -> . id PEXP''
           | ϵ
    TIPO' -> '[' ']'
           | ϵ
     CMD' -> ϵ
           | else CMD
    CMD'' -> = EXP ;
           | '[' EXP ']' = EXP ;
    SEXP' -> . length
           | '[' EXP ']'
           | ϵ
    EXPS' -> . length MEXP' AEXP' REXP' EXP' {, EXP}
           | '[' EXP ']' MEXP' AEXP' REXP' EXP' {, EXP}
           | MEXP' AEXP' REXP' EXP' {, EXP}
   EXPS'' -> . length MEXP' AEXP' REXP' EXP' {, EXP}
           | '[' EXP ']' MEXP' AEXP' REXP' EXP' {, EXP}
           | MEXP' AEXP' REXP' EXP' {, EXP}
  EXPS''' -> . length MEXP' AEXP' REXP' EXP' {, EXP}
           | '[' EXP ']' MEXP' AEXP' REXP' EXP' {, EXP}
           | MEXP' AEXP' REXP' EXP' {, EXP}
 EXPS'''' -> . length MEXP' AEXP' REXP' EXP' {, EXP}
           | '[' EXP ']' MEXP' AEXP' REXP' EXP' {, EXP}
           | MEXP' AEXP' REXP' EXP' {, EXP}
EXPS''''' -> id '(' ')' PEXP' EXPS'
           | int '[' EXP ']' MEXP' AEXP' REXP' EXP' {, EXP}
   PEXP'' -> PEXP'
           | '(' [EXPS] ')' PEXP'
